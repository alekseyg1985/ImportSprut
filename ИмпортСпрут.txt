Процедура ЗагрузитьГруппыТоваров() Экспорт	
	Запрос ="SELECT 
	|spr.group_wares.CODE_GROUP_WARES,
	|spr.group_wares.CODE_PARENT_GROUP_WARES,
	|spr.group_wares.NAME,
	|spr.group_wares.NUMBER_GROUP_WARES,
	|spr.group_wares.NIK_NAME_GROUP_WARES
	|FROM spr.group_wares
	//|where rownum <= 10
	|ORDER BY spr.group_wares.CODE_GROUP_WARES";	
	Тч = ПолучитьВыборку(Запрос);
	Если Тч = Неопределено Тогда
		Сообщить("Не загруженны группы товаров", СтатусСообщения.ОченьВажное);
		Возврат;
	КонецЕсли;	
	Для Каждого Ст Из Тч Цикл
		Сс = ПолучитьНоменклатуру(Ст.CODE_GROUP_WARES, Истина );
		Если Сс.Пустая() Тогда
			С = Справочники.Номенклатура.СоздатьГруппу();
		Иначе
			С = Сс.ПолучитьОбъект();
		КонецЕсли;
		С.КодВн = Ст.CODE_GROUP_WARES;
		С.Наименование = Ст.NAME;
		С.Родитель = ПолучитьНоменклатуру(Ст.CODE_PARENT_GROUP_WARES, Истина);
		С.Записать();		
	КонецЦикла; 	
КонецПроцедуры 

Процедура ЗагрузитьСчетаСпрут() Экспорт	
	Запрос ="SELECT CHART_OF_ACCOUNTS.CODE_ACCOUNT,
       |CHART_OF_ACCOUNTS.NAME,
       |CHART_OF_ACCOUNTS.ACCOUNT,
       |CHART_OF_ACCOUNTS.CODE_PARENT_ACCOUNT
       |FROM SPR.CHART_OF_ACCOUNTS";
	   
	Тч = ПолучитьВыборку(Запрос);
	Если Тч = Неопределено Тогда
		Сообщить("Не загруженны счета", СтатусСообщения.ОченьВажное);
		Возврат;
	КонецЕсли;	
	Для Каждого Ст Из Тч Цикл
		Сс = Справочники.СчетаСпрут.НайтиПоРеквизиту("КодВн", Ст.CODE_ACCOUNT);
		Если Сс.Пустая() Тогда
			С = Справочники.СчетаСпрут.СоздатьЭлемент();
		Иначе
			С = Сс.ПолучитьОбъект();
		КонецЕсли;
		С.КодВн = Ст.CODE_ACCOUNT;
		С.Наименование = Ст.NAME;
		С.Родитель = Справочники.СчетаСпрут.НайтиПоРеквизиту("КодВн", Ст.CODE_PARENT_ACCOUNT);
		С.СчетХозрасчетный = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Ст.ACCOUNT);
		С.Записать();		
	КонецЦикла; 	
КонецПроцедуры 

Функция ПолучитьСчет(Код)
	Сс = Справочники.СчетаСпрут.НайтиПоРеквизиту("КодВн", Код);
	Если Сс.Пустая() Тогда
		Сообщить("Не найден счет " + Код);
		С = Справочники.СчетаСпрут.ПустаяСсылка();
	КонецЕсли;
	Возврат Сс;
КонецФункции

Процедура ЗагрузитьПриходныеНакладные(ДатаНачало, ДатаКонец) Экспорт
	ПериодНачало  = Строка(Формат(ДатаНачало,"ДФ=dd.MM.yyyy"));
	ПериодКонец = Строка(Формат(ДатаКонец,"ДФ=dd.MM.yyyy"));	
	Параметры = Новый Массив();
	Параметры.Добавить(ПериодНачало);
	Параметры.Добавить(ПериодКонец); 	
	Запрос =  "SELECT INVOICE.CODE_INVOICE,
	|INVOICE.CODE_SHOP,
	|INVOICE.NUMBER_INVOICE,
	|INVOICE.DOC_PAYMENT,
	|INVOICE.CODE_FIRM_DESTINATION,
	|INVOICE.CODE_SOURCE,
	|INVOICE.DATE_INVOICE,
	|WARES_INVOICE.CODE_WARES,
	|WARES_INVOICE.QUANTITY_BY_INVOICE,
	|WARES_INVOICE.CODE_UNIT_BY_INVOICE,
	|WARES_INVOICE.PRICE_BY_INVOICE,
	|WARES_INVOICE.QUANTITY_IN_BASIS,
	|WARES_INVOICE.CODE_UNIT_IN_BASIS,
	|WARES_INVOICE.PRICE_COMING,
	|WARES_INVOICE.BATCH_INVOICE,
	|WARES_INVOICE.VAT,
	|WARES_INVOICE.CODE_WAREHOUSE,
	|WARES_INVOICE.PRICE_BY_INVOICE_BASIS,
	|WARES_INVOICE.PRICE_COMING_BASIS,
	|WARES_INVOICE.CODE_ACCOUNT
	|FROM  MZ.INVOICE 
	|JOIN
	|      MZ.WARES_INVOICE
	|      ON (  INVOICE.CODE_INVOICE = WARES_INVOICE.CODE_INVOICE)
	|WHERE (INVOICE.DATE_INVOICE BETWEEN TO_DATE(?, 'DD.MM.YYYY')  AND TO_DATE(?, 'DD.MM.YYYY') )";
	
	Тч = ПолучитьВыборку(Запрос,Параметры);
	Если Тч = Неопределено Тогда
		Сообщить("Не загруженны Приходные накладные");
		Возврат;
	КонецЕсли;
	
	CODE_INVOICE = Неопределено;
	Док = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
	
	счРасчетыПОСтавщики = ПланыСчетов.Хозрасчетный.РасчетыСОтечественнымиПоставщиками;	
	счУчетаНДС          = ПланыСчетов.Хозрасчетный.НалоговыйКредитНеподтвержденный;
	счУчетаНДСПот     = ПланыСчетов.Хозрасчетный.НалоговыйКредит;

	счМатериалы         = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;	
	
	
	
	Для Каждого  Ст Из Тч Цикл	
		
		Если  CODE_INVOICE <> Ст.CODE_INVOICE Тогда
			
			Если CODE_INVOICE <> Неопределено Тогда
				Попытка
					Док.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					Док.Записать(РежимЗаписиДокумента.Запись);
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;			
			ДокСсылка = Документы.ПоступлениеТоваровУслуг.НайтиПоРеквизиту("КодВн", Ст.CODE_INVOICE);
			Если ДокСсылка.Пустая() Тогда 
				Док = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
				Док.КодВн = Ст.CODE_INVOICE;				
			Иначе
				Док = ДокСсылка.ПолучитьОбъект();
				Док.Товары.Очистить();
			КонецЕсли; 			
			Док.Дата             =  Ст.DATE_INVOICE;			
			Док.Организация      =  ПолучитьОрганизацию();
			Док.ВидОперации      =  Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
			Док.Контрагент       =  ЗагрузитьКонтрагентаПоКоду(Ст.CODE_SOURCE);  
			Док.ДоговорКонтрагента = ПолучитьДоговорКОнтрагентаПоКонтрагенту(Док.Контрагент, "п");
			Док.СкладОрдер       =  ЗагрузитьСкладПоКоду(Ст.CODE_WAREHOUSE);
			Док.ВидПоступления   =  Перечисления.ВидыПоступленияТоваров.НаСклад;
			Док.ВалютаДокумента  =  Константы.ВалютаРегламентированногоУчета.Получить();
			Док.КурсВзаиморасчетов = 1;
			Док.КратностьВзаиморасчетов = 1; 			
			Док.ОтражатьВБухгалтерскомУчете = Истина;
			Док.ОтражатьВУправленческомУчете = Истина;
			Док.СчетУчетаРасчетовСКонтрагентом = счРасчетыПОСтавщики;
			Док.УчитыватьНДС = Истина;
			Док.СчетУчетаНДС     = счУчетаНДС;
			Док.СчетУчетаНДСПодтвержденный = счУчетаНДСПот;
			
		КонецЕсли;	
		
		СтрокаПоступление = Док.Товары.Добавить();
		СтрокаПоступление.Номенклатура = ЗагрузитьНоменклатуруПоКоду(Ст.CODE_WARES);		
		ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаПоступление, Док);		
		СтрокаПоступление.ЕдиницаИзмерения = ПолучитьЕдиницуИзмиренияДляНоменклатуры(СтрокаПоступление.Номенклатура, Ст.CODE_UNIT_BY_INVOICE);
		СтрокаПоступление.ЕдиницаИзмеренияМест = СтрокаПоступление.ЕдиницаИзмерения;		
		СтрокаПоступление.Количество   = Ст.QUANTITY_BY_INVOICE;
		СтрокаПоступление.Коэффициент  = 1;
		СтрокаПоступление.Цена         = Ст.PRICE_COMING;
		СтрокаПоступление.СтавкаНДС    = ПолучитьСтавкуНДС(Ст.VAT);
		СтрокаПоступление.Склад        = ЗагрузитьСкладПоКоду(Ст.CODE_WAREHOUSE);
		//	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаПоступление, ЭтотОбъект,"Приобретение"); 		
		// Рассчитываем реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаПоступление, Док);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаПоступление, Док);				
		СтрокаПоступление.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
		СтрокаПоступление.СчетУчетаБУ = ПолучитьСчет(Ст.CODE_ACCOUNT); 
		Если СтрокаПоступление.СчетУчетаБУ.Пустая() Тогда
			СтрокаПоступление.СчетУчетаБУ = счМатериалы;
		КонецЕсли;		
		CODE_INVOICE = Ст.CODE_INVOICE;
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьЧекиККМ(ДатаНачало, ДатаКонец) Экспорт
	ПериодНачало  = Строка(Формат(ДатаНачало,"ДФ=dd.MM.yyyy"));
	ПериодКонец = Строка(Формат(ДатаКонец,"ДФ=dd.MM.yyyy"));	
	Параметры = Новый Массив();
	Параметры.Добавить(ПериодНачало);
	Параметры.Добавить(ПериодКонец);
	Запрос = "SELECT
	|RTL_RETAIL_ORDER.CODE_RETAIL_ORDER,
	|RTL_RETAIL_ORDER.DATE_RETAIL_ORDER,
	|RTL_RETAIL_ORDER.CODE_WAREHOUSE,
	|RTL_RETAIL_ORDER.NUMBER_RECEIPT,
	|RTL_RETAIL_ORDER.CODE_REGISTER_CASH_REGISTER,
	|RTL_RETAIL_ORDER_WARES.CODE_WARES,
	|RTL_RETAIL_ORDER_WARES.CODE_UNIT,
	|RTL_RETAIL_ORDER_WARES.QUANTITY,
	|RTL_RETAIL_ORDER_WARES.VAT,
	|RTL_RETAIL_ORDER_WARES.PRICE_SALE,
	|RTL_RETAIL_ORDER_WARES.SUM_DISCOUNT
	|FROM 
	|MZ.RTL_RETAIL_ORDER
	|JOIN 
	|    MZ.RTL_RETAIL_ORDER_WARES
	|   ON (  RTL_RETAIL_ORDER.CODE_RETAIL_ORDER = RTL_RETAIL_ORDER_WARES.CODE_RETAIL_ORDER)
	|WHERE (RTL_RETAIL_ORDER.DATE_RETAIL_ORDER BETWEEN TO_DATE(?, 'DD.MM.YYYY')  AND TO_DATE(?, 'DD.MM.YYYY'))";   
	
	Тч = ПолучитьВыборку(Запрос,Параметры);
	Если Тч = Неопределено Тогда
		Сообщить("Не загруженны чеки ккм");
		Возврат;
	КонецЕсли;	
	CODE_INVOICE = Неопределено;
	Док = Документы.ЧекККМ.ПустаяСсылка();		
	Для Каждого  Ст Из Тч Цикл		
		Если  CODE_INVOICE <> Ст.CODE_RETAIL_ORDER Тогда			
			Если CODE_INVOICE <> Неопределено Тогда
				Попытка
					Док.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					Док.Записать(РежимЗаписиДокумента.Запись);
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;			
			ДокСсылка = Документы.ЧекККМ.НайтиПоРеквизиту("КодВн", Ст.CODE_RETAIL_ORDER);
			Если ДокСсылка.Пустая() Тогда 
				Док = Документы.ЧекККМ.СоздатьДокумент();
				Док.КодВн = Ст.CODE_RETAIL_ORDER;				
			Иначе
				Док = ДокСсылка.ПолучитьОбъект();
				Док.Товары.Очистить();
				Док.Оплата.Очистить();
			КонецЕсли; 			
			Док.Дата             =  Ст.DATE_RETAIL_ORDER;				
			Док.Организация      =  ПолучитьОрганизацию();
			Док.ВидОперации      =  Перечисления.ВидыОперацийЧекККМ.Продажа;
			Док.Склад            =  ЗагрузитьСкладПоКоду(Ст.CODE_WAREHOUSE);
			Док.КассаККМ         =  ЗагрузитьКассуККМПоКоду(Ст.CODE_REGISTER_CASH_REGISTER);
			Док.НомерЧекаККМ     =  Ст.DATE_RETAIL_ORDER;						
		КонецЕсли;	
		
		СтрокаПоступление = Док.Товары.Добавить();		
		СтрокаПоступление.Номенклатура = ЗагрузитьНоменклатуруПоКоду(Ст.CODE_WARES);		
		ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаПоступление, Док);		
		СтрокаПоступление.ЕдиницаИзмерения = ПолучитьЕдиницуИзмиренияДляНоменклатуры(СтрокаПоступление.Номенклатура, Ст.CODE_UNIT);			
		СтрокаПоступление.Количество   = Ст.QUANTITY;
		СтрокаПоступление.Коэффициент  = 1;
		СтрокаПоступление.Цена         = Ст.PRICE_SALE;		
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаПоступление, Док);
		
		СтрокаОплата           = Док.Оплата.Добавить();
		СтрокаОплата.Сумма     = СтрокаПоступление.Сумма;
		СтрокаОплата.ВидОплаты = Справочники.ВидыОплатЧекаККМ.Наличные;		
		
		CODE_INVOICE = Ст.CODE_RETAIL_ORDER;
	КонецЦикла;
	Попытка
		Док.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Док.Записать(РежимЗаписиДокумента.Запись);
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры



Функция ЗагрузитьНоменклатуруПоКоду(КодВн)  Экспорт  	 
	Ном = ПолучитьНоменклатуру(КодВн);
	Если НЕ Ном.Пустая() Тогда
		Возврат Ном;
	КонецЕсли;
	Запрос =  "SELECT WARES.CODE_WARES,
	|WARES.CODE_UNIT,
	|WARES.CODE_GROUP,
	|WARES.NAME_WARES,
	|WARES.ARTICL
	|FROM SPR.WARES
	|WHERE (WARES.CODE_WARES = ?)";
	Параметры = Новый Массив();
	Параметры.Добавить(КодВн);
	
	Тч = ПолучитьВыборку(Запрос,Параметры);
	
	Если Тч = Неопределено Тогда
		Сообщить("Не загруженна номенклатура по коду " + КодВн );
		Возврат Справочники.Номенклатура.ПустаяСсылка();		
	КонецЕсли;
	
	ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоКоду("000000001");	
	
	Для Каждого Ст Из Тч Цикл 
		Ном = Справочники.Номенклатура.СоздатьЭлемент();
		Ном.КодВн        = Ст.CODE_WARES;
		Ном.Артикул      = Ст.ARTICL;
		Ном.Наименование = Ст.NAME_WARES;
		Ном.НаименованиеПолное = Ст.NAME_WARES; 
		Ном.БазоваяЕдиницаИзмерения = ЗагрузитьЕдиницуИзмиренияПоКоду(Ст.CODE_UNIT);
		Ном.ВидНоменклатуры = ВидНоменклатуры;
		Ном.Родитель  = ПолучитьНоменклатуру(Ст.CODE_GROUP, Истина);
		Ном.Записать();
		
		ВыборкаЕдиниц = Справочники.ЕдиницыИзмерения.Выбрать(, Ном.Ссылка);
		Если ВыборкаЕдиниц.Следующий() Тогда
			НайденнаяЕдиница = ВыборкаЕдиниц.Ссылка;
		Иначе
			НайденнаяЕдиницаОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
			
			НайденнаяЕдиницаОбъект.Наименование            = СокрЛП(Ном.БазоваяЕдиницаИзмерения);
			НайденнаяЕдиницаОбъект.ЕдиницаПоКлассификатору = Ном.БазоваяЕдиницаИзмерения;
			НайденнаяЕдиницаОбъект.Коэффициент             = 1;
			НайденнаяЕдиницаОбъект.Владелец                = Ном.Ссылка;
			
			НайденнаяЕдиницаОбъект.Записать();
			НайденнаяЕдиница = НайденнаяЕдиницаОбъект.Ссылка;
		КонецЕсли;
		Ном.ЕдиницаХраненияОстатков = НайденнаяЕдиница;
		Ном.ЕдиницаИзмеренияМест = НайденнаяЕдиница;
		Ном.ЕдиницаДляОтчетов = НайденнаяЕдиница;
		Ном.Записать();
		
	КонецЦикла;
	Возврат Ном.Ссылка;
КонецФункции
 
Функция ЗагрузитьЕдиницуИзмиренияПоКоду(КодВн) Экспорт 
	Спр = Справочники.КлассификаторЕдиницИзмерения.НайтиПоРеквизиту("КодВн", КодВн);
	Если НЕ Спр.Пустая() Тогда
		Возврат Спр;
	КонецЕсли;
	
	Запрос =  "SELECT UNIT_DIMENSION.CODE_UNIT, UNIT_DIMENSION.NAME_UNIT
	|FROM SPR.UNIT_DIMENSION
	|WHERE (UNIT_DIMENSION.CODE_UNIT = ?)";
	Параметры = Новый Массив();
	Параметры.Добавить(КодВн);
	Тч = ПолучитьВыборку(Запрос,Параметры);
	Если Тч = Неопределено Тогда
		Сообщить("Не загруженны единицы измирения по коду " + КодВн );
		Возврат Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
	КонецЕсли;
	Для Каждого Ст Из Тч Цикл 
		СпрОб = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		СпрОб.КодВн = Ст.CODE_UNIT;
		СпрОб.Наименование = Ст.NAME_UNIT;
		СпрОб.НаименованиеПолное = Ст.NAME_UNIT; 
		СпрОб.Записать();
	КонецЦикла;
	Возврат СпрОб.Ссылка;
КонецФункции

Функция ПолучитьЕдиницуИзмиренияДляНоменклатуры(Номенклатура, КодВн) 
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец = &Владелец
	|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору.КодВн = &КодВн");
	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	Запрос.УстановитьПараметр("КодВн", КодВн);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() <> 0 Тогда 
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Запрос  = "SELECT ADDITION_UNIT.COEFFICIENT      
              |FROM SPR.ADDITION_UNIT
              |WHERE (ADDITION_UNIT.CODE_WARES = ?)
			  |AND (ADDITION_UNIT.CODE_UNIT = ?)";	
   Параметры = Новый Массив();
   Параметры.Добавить(Номенклатура.КодВн);
   Параметры.Добавить(КодВн);
   
   ЕдиницаПоКласификатору = ЗагрузитьЕдиницуИзмиренияПоКоду(КодВн);    
   Тч = ПолучитьВыборку(Запрос,Параметры);
   Если Тч = Неопределено Тогда
	   Сообщить("Не загруженна единица измиренияс кодом" + КодВн);
	   Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
   КонецЕсли;
   
   Для Каждого Ст Из Тч Цикл
		НайденнаяЕдиницаОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
			
		НайденнаяЕдиницаОбъект.Наименование            = ЕдиницаПоКласификатору.НаименованиеПолное;
		НайденнаяЕдиницаОбъект.ЕдиницаПоКлассификатору = ЕдиницаПоКласификатору;
		НайденнаяЕдиницаОбъект.Коэффициент             = Ст.COEFFICIENT;
		НайденнаяЕдиницаОбъект.Владелец                = Номенклатура;  		
		НайденнаяЕдиницаОбъект.Записать(); 	   
   КонецЦикла;
   Возврат НайденнаяЕдиницаОбъект.Ссылка;
КонецФункции

Функция ПолучитьНоменклатуру(КодВн, ЭтоГруппа = ложь) 	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.КодВн = &КодВн
	|	И Номенклатура.ЭтоГруппа = &ЭтоГруппа";
	
	Запрос.УстановитьПараметр("КодВн", КодВн);
	Запрос.УстановитьПараметр("ЭтоГруппа", ЭтоГруппа);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	Иначе 		
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.Ссылка;	
	КонецЕсли;
КонецФункции

Функция ЗагрузитьКонтрагентаПоКоду(КодВн) Экспорт 
 Кон = Справочники.Контрагенты.НайтиПоРеквизиту("КодВн", КодВн);
 Если НЕ Кон.Пустая() Тогда
	 Возврат Кон;
 КонецЕсли;
 Запрос =  "SELECT  FIRMS.CODE_FIRM,
    |FIRMS.IMPOCITION,
	|FIRMS.CODE_ZIP,
	|FIRMS.AGREE_NUMBER,
	|FIRMS.NAME,
	|FIRMS.NAME_FOR_PRINT,
	|FIRMS.DESCRIPTION
	|FROM SPR.FIRMS
	|WHERE (FIRMS.CODE_FIRM = ?)";
	Параметры = Новый Массив();
	Параметры.Добавить(КодВн);
	Тч = ПолучитьВыборку(Запрос,Параметры);
	Если Тч = Неопределено Тогда
		Сообщить("Не загруженн контрагент с кодом " + КодВн);
		Возврат  Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	Для Каждого Ст Из Тч Цикл 
		Спр = Справочники.Контрагенты.СоздатьЭлемент();
		Спр.КодВн        = Ст.CODE_FIRM;
		Спр.Наименование = Ст.NAME;
		Спр.НаименованиеПолное = Ст.NAME_FOR_PRINT;
		Спр.НомерСвидетельства = Ст.AGREE_NUMBER;
		Спр.ИНН =          Ст.IMPOCITION;
		Спр.КодПоЕДРПОУ =  Ст.CODE_ZIP;
		Спр.Комментарий =   Ст.DESCRIPTION;
		Спр.Покупатель = Истина;
		Спр.Поставщик  = Истина;
		Спр.Записать();		
	КонецЦикла;
	Возврат Спр.Ссылка;
КонецФункции

Функция ПолучитьДоговорКОнтрагентаПоКонтрагенту(Контрагент, ВидДоговора = "п")
	Если ВидДоговора = "п" Тогда 
		ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	Иначе
		ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	КонецЕсли;
		
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
	|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора");
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Запрос.УстановитьПараметр("Организация", ПолучитьОрганизацию());
	Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Количество() = 0 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	Договор.Владелец = Контрагент;
	Договор.Организация = ПолучитьОрганизацию();
	Договор.ВидДоговора = ВидДоговора;
	Договор.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	Договор.Наименование = "договор с " + Строка(ВидДоговора);
	Договор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	Договор.СхемаНалоговогоУчета  = Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.ПоПервомуСобытию;
	Договор.Записать();
	Возврат  Договор.Ссылка;
КонецФункции

Функция ПолучитьОрганизацию()
	Возврат Справочники.Организации.НайтиПоКоду("000000001");	
КонецФункции

Функция ЗагрузитьСкладПоКоду(КодВн) Экспорт 
	СпрСсылка = Справочники.Склады.НайтиПоРеквизиту("КодВн", КодВн);
	Если НЕ СпрСсылка.Пустая() Тогда
		Возврат СпрСсылка;
	КонецЕсли;
	Запрос =  "SELECT WAREHOUSE.CODE_WAREHOUSE,
	|WAREHOUSE.NAME_WAREHOUSE,
	|WAREHOUSE.DESCRIPTION
	|FROM SPR.WAREHOUSE
	|WHERE (WAREHOUSE.CODE_WAREHOUSE = ?)";
	Параметры = Новый Массив();
	Параметры.Добавить(КодВн);
	Тч = ПолучитьВыборку(Запрос,Параметры);
	Если Тч = Неопределено Тогда
		Сообщить("Не загруженн склад с кодом " + КодВн);
		Возврат  Справочники.Склады.ПустаяСсылка();
	КонецЕсли; 
	Для Каждого Ст Из Тч Цикл		
		Спр = Справочники.Склады.СоздатьЭлемент();
		Спр.КодВн        = Ст.CODE_WAREHOUSE;
		Спр.Наименование = Ст.NAME_WAREHOUSE;
		Спр.Комментарий  = Ст.DESCRIPTION;
		Спр.Записать();		
	КонецЦикла;
	Возврат Спр.Ссылка;
КонецФункции


Функция ЗагрузитьКассуККМПоКоду(КодВн) Экспорт 
	СпрСсылка = Справочники.КассыККМ.НайтиПоРеквизиту("КодВн", КодВн);
	Если НЕ СпрСсылка.Пустая() Тогда
		Возврат СпрСсылка;
	КонецЕсли;
	Запрос ="select 
	|CODE_REGISTER_CASH_REGISTER,
	|SERIAL_NUMBER_CASH_REGISTER,
	|DESCRIPTION
	|from 
	|mz.register_cash_register
	|where
	|(CODE_REGISTER_CASH_REGISTER = ?)"; 
	
	Параметры = Новый Массив();
	Параметры.Добавить(КодВн);
	Тч = ПолучитьВыборку(Запрос,Параметры);
	Если Тч = Неопределено Тогда
		Сообщить("Не загруженна касса с кодом " + КодВн);
		Возврат  Справочники.КассыККМ.ПустаяСсылка();
	КонецЕсли; 
	Для Каждого Ст Из Тч Цикл		
		Спр = Справочники.КассыККМ.СоздатьЭлемент();
		Спр.Владелец     = ПолучитьОрганизацию();
		Спр.КодВн        = Ст.CODE_REGISTER_CASH_REGISTER;
		Спр.Наименование = Ст.SERIAL_NUMBER_CASH_REGISTER;
		Спр.Комментарий  = Ст.DESCRIPTION;
		Спр.Записать();		
	КонецЦикла;
	Возврат Спр.Ссылка;
КонецФункции


Функция ПолучитьСтавкуНДС(Ставка)
	Если Ставка = 0.2 Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
	ИначеЕсли Ставка = 0.07 Тогда
        СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
	ИначеЕсли Ставка = 0 Тогда 
		СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
	Иначе 
		СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
	КонецЕсли;
	Возврат СтавкаНДС;
КонецФункции
Функция ПолучитьВыборку(ТекстЗапроса, Параметры = Неопределено);
	//SET NLS_LANG=AMERICAN_AMERICA.CL8MSWIN1251
	Connection = Новый COMОбъект("ADODB.Connection");	
	СтрокаПодключения =   "DRIVER={Oracle in OraClient11g_home1}; Dbq=46.150.125.58:5899/CENTRAL; UID=joboracle;PWD=joboracle;";
	Попытка
		Connection.Open(СокрЛП(СтрокаПодключения));
	Исключение
		Сообщить("Нет подключения к базе денных");
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	ВыборкаСтрок = Новый COMОбъект("ADODB.Command");
	ВыборкаСтрок.ActiveConnection = Connection; // работаем через это соединение
	ВыборкаСтрок.CommandTimeOut = Connection.CommandTimeOut; // таков тайм-аут	
	ВыборкаСтрок.CommandText = ТекстЗапроса;	
	Если Параметры <> Неопределено Тогда
		Для Каждого СтПараметры Из Параметры Цикл 
			ВыборкаСтрок.Parameters(Параметры.Найти(СтПараметры)).Value = СтПараметры;
		КонецЦикла;
	КонецЕсли;	
	Попытка
		Т = ВыборкаСтрок.Execute();		
	Исключение
		Сообщить("Обрабоку загрузки прервано. Ошибка запроса.");
		Сообщить(ОписаниеОшибки());
		Connection.Close();
		Возврат Неопределено;
	КонецПопытки;	
	Попытка
		Т.MoveFirst();
	Исключение
		Сообщить("Нет данных.");
		Connection.Close();
		Возврат Неопределено;
	КонецПопытки;	
	КоличествоПолей = Т.Fields.Count;
	ТаблицаРезультат = Новый ТаблицаЗначений;	
	Для Поле =0 По  КоличествоПолей-1 Цикл
		ТаблицаРезультат.Колонки.Добавить(Т.Fields(Поле).Name);	
	КонецЦикла;	
	Пока Т.EOF() = 0 do
		СтРезультат = ТаблицаРезультат.Добавить();		
		Для Каждого ПолеТаблицы Из ТаблицаРезультат.Колонки Цикл
			СтРезультат[ПолеТаблицы.Имя] = Т.Fields(ПолеТаблицы.Имя).Value;
		КонецЦикла;		
		Т.MoveNext();  
	КонецЦикла;	   	
	Connection.Close();	
	Возврат ТаблицаРезультат;	
КонецФункции;





